import { cvToHex, tupleCV, uintCV } from '@stacks/transactions';
import { HubMessage } from './hub.message';
import { DeployInterchainToken, DeployTokenManager, HubMessageType, InterchainTransfer } from './hub.message.types';

describe('HubMessage Static Method Tests', () => {
  describe('abiDecode Tests', () => {
    it('should decode ABI-encoded RECEIVE_FROM_HUB Interchain Transfer', () => {
      const result = HubMessage.abiDecode(
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a6d756c7469766572737800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000002c2a94e0c1200b3432349f28ac617a7c9242bbc9d2c9cb46d7fe9ac55510471000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000dbd2fc137a300000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002077588c18055a483754b68c2378d5e7a6fa4e1d4e0302dadf5db12e7a50a1b5bf0000000000000000000000000000000000000000000000000000000000000014f12372616f9c986355414ba06b3ca954c0a7b0dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      );
      expect(result).toBeDefined();
      expect(result?.messageType).toEqual(HubMessageType.ReceiveFromHub);
      expect((result?.payload as InterchainTransfer).messageType).toEqual(HubMessageType.InterchainTransfer);
      expect((result?.payload as InterchainTransfer).tokenId).toEqual(
        '0x2c2a94e0c1200b3432349f28ac617a7c9242bbc9d2c9cb46d7fe9ac555104710',
      );
      expect((result?.payload as InterchainTransfer).sourceAddress).toEqual(
        '0x77588c18055a483754b68c2378d5e7a6fa4e1d4e0302dadf5db12e7a50a1b5bf',
      );
      expect((result?.payload as InterchainTransfer).destinationAddress).toEqual(
        '0xf12372616f9c986355414ba06b3ca954c0a7b0dc',
      );
      expect((result?.payload as InterchainTransfer).amount).toEqual('990000000000000000');
      expect((result?.payload as InterchainTransfer).data).toEqual('0x');
      expect(result?.sourceChain).toEqual('multiversx');
    });

    it('should decode ABI-encoded RECEIVE_FROM_HUB Deploy Interchain Token', () => {
      const result = HubMessage.abiDecode(
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000106f7074696d69736d2d7365706f6c6961000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000138aeb4100114b3b4a49492d038d21344fee0d3ec84b8b5f3e0ebbac760590fa300000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000f436861696e4c696e6b20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c494e4b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      );
      expect(result).toBeDefined();
      expect(result?.messageType).toEqual(HubMessageType.ReceiveFromHub);
      expect((result?.payload as DeployInterchainToken).messageType).toEqual(HubMessageType.DeployInterchainToken);
      expect((result?.payload as DeployInterchainToken).tokenId).toEqual(
        '0x38aeb4100114b3b4a49492d038d21344fee0d3ec84b8b5f3e0ebbac760590fa3',
      );
      expect((result?.payload as DeployInterchainToken).name).toEqual('ChainLink Token');
      expect((result?.payload as DeployInterchainToken).symbol).toEqual('LINK');
      expect((result?.payload as DeployInterchainToken).decimals).toEqual(18);
      expect((result?.payload as DeployInterchainToken).minter).toEqual('0x');
      expect(result?.sourceChain).toEqual('optimism-sepolia');
    });

    it('should decode ABI-encoded RECEIVE_FROM_HUB Deploy Token Manager', () => {
      const result = HubMessage.abiDecode(
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008457468657265756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000201b3d64c8c6530a3aad5909ae7e0985d4438ce8eafd90e51ce48fbc809bced39000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000032010000000000000000050000000000000000040000000000000000000000000000010000000c5745474c442d3132333435360000000000000000000000000000',
      );
      expect(result).toBeDefined();
      expect(result?.messageType).toEqual(HubMessageType.ReceiveFromHub);
      expect((result?.payload as DeployTokenManager).messageType).toEqual(HubMessageType.DeployTokenManager);
      expect((result?.payload as DeployTokenManager).tokenId).toEqual(
        '0x01b3d64c8c6530a3aad5909ae7e0985d4438ce8eafd90e51ce48fbc809bced39',
      );
      expect((result?.payload as DeployTokenManager).tokenManagerType).toEqual(4);
      expect((result?.payload as DeployTokenManager).params).toEqual(
        '0x010000000000000000050000000000000000040000000000000000000000000000010000000c5745474c442d313233343536',
      );
      expect(result?.sourceChain).toEqual('Ethereum');
    });

    it('should return null for invalid payload', () => {
      const result = HubMessage.abiDecode('invalid_payload');
      expect(result).toBeNull();
    });
  });

  describe('abiEncode Tests', () => {
    it('should encode a SendToHub Interchain Transfer message to ABI', () => {
      const payload =
        '0x0c000000031164657374696e6174696f6e2d636861696e0d00000008657468657265756d077061796c6f616402000000ab0c0000000606616d6f756e7401000000000000000000000000000186a004646174610200000001001364657374696e6174696f6e2d616464726573730200000001000e736f757263652d61646472657373051a6d78de7b0625dfbfc16c3a8a5735f6dc3dc3f2ce08746f6b656e2d69640200000020753306c46380848b5189cd9db90107b15d25decccd93dcb175c0098958f18b6f0474797065010000000000000000000000000000000004747970650100000000000000000000000000000003';
      const encoded = HubMessage.abiEncode(payload);

      expect(encoded).toBeDefined();
      expect(encoded).toContain(
        '0x0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008657468657265756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000753306c46380848b5189cd9db90107b15d25decccd93dcb175c0098958f18b6f00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000029535431505148514b5630524a585a465931444758384d4e534e5956453356475a4a53525450475a474d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004307830300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043078303000000000000000000000000000000000000000000000000000000000',
      );
    });
    it('should encode a SendToHub Deploy Interchain Token message to ABI', () => {
      const payload =
        '0x0c000000031164657374696e6174696f6e2d636861696e0d00000008657468657265756d077061796c6f616402000000920c0000000608646563696d616c730100000000000000000000000000000006066d696e746572020000000100046e616d650d0000000673616d706c650673796d626f6c0d0000000673616d706c6508746f6b656e2d69640200000020563dc3698c0f2c5adf375ff350bb54ecf86d2be109e3aacaf38111cdf171df780474797065010000000000000000000000000000000104747970650100000000000000000000000000000003';
      const encoded = HubMessage.abiEncode(payload);

      expect(encoded).toBeDefined();
      expect(encoded).toContain(
        '0x0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008657468657265756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000001563dc3698c0f2c5adf375ff350bb54ecf86d2be109e3aacaf38111cdf171df7800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000673616d706c650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000673616d706c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043078303000000000000000000000000000000000000000000000000000000000',
      );
    });
    it('should encode a SendToHub Deploy Token Manager message to ABI', () => {
      const payload =
        '0x0c000000031164657374696e6174696f6e2d636861696e0d00000008657468657265756d077061796c6f6164020000007a0c0000000406706172616d7302000000010008746f6b656e2d69640200000020c99a1f0a4b46456129d86b37f580af16fea20eeaf7e73628547c10f6799b90b012746f6b656e2d6d616e616765722d7479706501000000000000000000000000000000020474797065010000000000000000000000000000000204747970650100000000000000000000000000000003';
      const encoded = HubMessage.abiEncode(payload);

      expect(encoded).toBeDefined();
      expect(encoded).toContain(
        '0x0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000008657468657265756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002c99a1f0a4b46456129d86b37f580af16fea20eeaf7e73628547c10f6799b90b00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000043078303000000000000000000000000000000000000000000000000000000000',
      );
    });
    it('should return null for unsupported message types', () => {
      const cv = tupleCV({
        'message-type': uintCV(64),
      });
      const encoded = HubMessage.abiEncode(cvToHex(cv));
      expect(encoded).toBeNull();
    });
  });

  describe('clarityEncode Tests', () => {
    it('should encode a ReceiveFromHub Interchain Transfer clarity message', () => {
      const clarityEncodedPayload =
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e6176616c616e6368652d66756a6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000c031ce12590c2efefb2606c231b1b47bc10480448ae705c8f0d54edf616ec2f200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000014f12372616f9c986355414ba06b3ca954c0a7b0dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000016051a72cdd749200c730ca316a0d6157ceff9a50be50c000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
      const clarityEncoded = HubMessage.clarityEncodeFromPayload(clarityEncodedPayload);
      expect(clarityEncoded).toBeDefined();
      expect(cvToHex(clarityEncoded)).toBe(
        '0x0c0000000706616d6f756e740100000000000000000de0b6b3a7640000046461746102000000001364657374696e6174696f6e2d616464726573730200000016051a72cdd749200c730ca316a0d6157ceff9a50be50c0e736f757263652d616464726573730200000014f12372616f9c986355414ba06b3ca954c0a7b0dc0c736f757263652d636861696e0d0000000e6176616c616e6368652d66756a6908746f6b656e2d69640200000020c031ce12590c2efefb2606c231b1b47bc10480448ae705c8f0d54edf616ec2f204747970650100000000000000000000000000000000',
      );
    });

    it('should encode a ReceiveFromHub Deploy Interchain Token clarity message', () => {
      const clarityEncodedPayload =
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e6176616c616e6368652d66756a6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000001c031ce12590c2efefb2606c231b1b47bc10480448ae705c8f0d54edf616ec2f200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a4178656c61725553444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000741584c55534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
      const clarityEncoded = HubMessage.clarityEncodeFromPayload(clarityEncodedPayload);
      expect(clarityEncoded).toBeDefined();
      expect(cvToHex(clarityEncoded)).toBe(
        '0x0c0000000708646563696d616c7301000000000000000000000000000000120c6d696e7465722d62797465730200000000046e616d650d0000000a4178656c6172555344430c736f757263652d636861696e0d0000000e6176616c616e6368652d66756a690673796d626f6c0d0000000741584c5553444308746f6b656e2d69640200000020c031ce12590c2efefb2606c231b1b47bc10480448ae705c8f0d54edf616ec2f204747970650100000000000000000000000000000001',
      );
    });

    it('should encode a ReceiveFromHub Deploy Token Manager clarity message', () => {
      const clarityEncodedPayload =
        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e6176616c616e6368652d66756a6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002dfbbd97a4e0c3ec2338d800be851dca6d08d4779398d4070d5cb18d2ebfe62d70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000420c00000002086f70657261746f72090d746f6b656e2d61646472657373061a555db886b8dda288a0a7695027c4d2656dacbc760e73616d706c652d7369702d303130000000000000000000000000000000000000000000000000000000000000';
      const clarityEncoded = HubMessage.clarityEncodeFromPayload(clarityEncodedPayload);
      expect(clarityEncoded).toBeDefined();
      expect(cvToHex(clarityEncoded)).toBe(
        '0x0c0000000506706172616d7302000000420c00000002086f70657261746f72090d746f6b656e2d61646472657373061a555db886b8dda288a0a7695027c4d2656dacbc760e73616d706c652d7369702d3031300c736f757263652d636861696e0d0000000e6176616c616e6368652d66756a6908746f6b656e2d69640200000020dfbbd97a4e0c3ec2338d800be851dca6d08d4779398d4070d5cb18d2ebfe62d712746f6b656e2d6d616e616765722d74797065010000000000000000000000000000000204747970650100000000000000000000000000000002',
      );
    });
  });
});
